package RaceObjectLevelConditionPrictice;

public class SynchronizedBlock {
	
	public static void main(String[] args) {
		
		
		Common common= new Common();
		
		ThreadA a = new ThreadA(common,"Ram");
		ThreadB b = new ThreadB(common,"Shyam");
		a.start();
		b.start();
	}
	


}




class Common {
	
	
	
	
	public void methodWithSynchronizedBlock(String name) {
		
		System.out.println("not into critical section");
        System.out.println("welcome");
		
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		System.out.println(name);
	
	}
	
	
	
}

class ThreadA extends Thread{
	
	String name;
	Common common;
	
	public ThreadA(Common common ,String name) {
		this.common = common;
		this.name =name;
		
	}
	
	
	
	@Override
	public void run() {
		
		common.methodWithSynchronizedBlock(name);
		
	}
	
}


class ThreadB extends Thread{
	

	String name;
	Common common;
	
	public ThreadB(Common common ,String name) {
		this.common = common;
		this.name =name;
		
	}
	

	@Override
	public void run() {
		
		common.methodWithSynchronizedBlock(name);
		
	}
	
	
}

